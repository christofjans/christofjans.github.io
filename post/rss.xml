<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title><![CDATA[The Blog of Christof Jans]]></title>
        <description><![CDATA[The Blog of Christof Jans]]></description>
        <link>http://blog.christofjans.com</link>
        <image>
            <url>http://blog.christofjans.com/headshot.png</url>
            <title>The Blog of Christof Jans</title>
            <link>http://blog.christofjans.com</link>
        </image>
        <generator>NodeJS RSS Module</generator>
        <lastBuildDate>Tue, 18 Mar 2014 17:13:06 GMT</lastBuildDate>
        <atom:link href="http://blog.christofjans.com/rss.xml" rel="self" type="application/rss+xml" />
        <author><![CDATA[Christof Jans]]></author>
        <item>
            <title><![CDATA[Find the culprit with git bisect]]></title>
            <description><![CDATA[# Find the culprit with git bisect

Suppose you are developing your application, merrily committing code when suddenly you realize that a bug has been introduced. You know for sure an earlier commit was correct but the last commit is not. The bug was introduced somewhere between these 2 commits, but where?  

You could test every commit since the last known good commit, but if there are many commits this could take a long time. Suppose the last know good commit is called `good`, the first known bad commit is called `bad` and there are 100 commits in the interval `[good,bad]`. A linear search has to test (on average) 50 commits.  

Luckily git has a built in tool to help you with this: `git bisect`. The bisect algorithm will find the commit that is in the 'middle' of `good` and `bad` (let's call it `middle`). If `middle` is determined to be good the interval is halved to `[middle, bad]`, otherwise it's halved to `[good, middle]`. Since the interval is halved each time, only $$log_2 100 \approx 7$$ tests are needed.  

Here is how it works:

    > git bisect start
    > git bisect good f45f0a85
    > git bisect bad 08ecc95d
    Bisecting: 100 revisions left to test after this (roughly 7 steps)
    [a167b78a47d89185a6450e41421b7aa936884fe1] added awesome sauce

`git bisect` starts the bisect task. `git bisect good f45f0a85` tells git the SHA of the last known good commit. `git bisect bad 08ecc95d` tells git the SHA of the first known bad commit. Git will then check out a commit for you to test. You must inform git whether this commit is good or bad. If it's good, type:

    git bisect good

If it's bad, type:

    git bisect bad

Based on the information you give, git will keep halving the interval until the culprit is found.

    a167b78a47d89185a6450e41421b7aa936884fe1 is the first bad commit
    commit a167b78a47d89185a6450e41421b7aa936884fe1
    Author: Christof Jans <christofjans@someplace.com>
    Date:   Mon Mar 17 21:13:41 2014 -0400

    small fix - no need to test

Git has found the culprit and gives you the hash, author date and message of the commit. Finally you can exit bisect mode with:

    git bisect reset

## Automating git bisect

`git bisect` drastically reduces the number of commits you have to test but you still have to manually test each commit. Luckily, `git bisect` supports scripting the test:

    git bisect start bad_commit good_commit
    git bisect run test_commit.sh

In this example `test_commit.sh` is a bash shell script to test if the commit is good or bad. If the commit is good the script should return 0, otherwise it should return a non-zero integer. Now `git bisect` will run fully automated. If you don't like writing bash shell scripts, you can just call a windows exe from the script:

    "c:\path_to_exe\test_commit.exe"

Again, the .exe should return 0 if the commit is good and a non-zero integer if the commit is bad.  

## Conclusion

Git bisect is a powerful tool to find bad commits quickly. It can be run in interactive mode or fully automated. Also note that if you find yourself using `git bisect` all the time, you might want to consider integrating unit tests in your build ;)  

Hope this helps.]]></description>
            <link>http://blog.christofjans.com/find_the_culprit_with_git_bisect.post.html</link>
            <guid isPermaLink="true">http://blog.christofjans.com/find_the_culprit_with_git_bisect.post.html</guid>
            <dc:creator><![CDATA[Christof Jans]]></dc:creator>
            <pubDate>Tue, 18 Mar 2014 01:15:46 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Test]]></title>
            <description><![CDATA[# Test

This is a test post of my new "blog-engine". The world clearly does not have enough blog engines so I decided to write my own. It uses git, node.js and markdown on the client and is hosted on Amazon S3.

## Math

Math is awesome. I don't know if I'll be doing a lot of math blogging, but I would like to have the option. I'm using the awesome [MathJax](http://www.mathjax.org) library to render math.

This is inline math: $$\Delta =\sum_{i=1}^N w_i (x_i - \bar{x})^2$$ .  

This is a math paragraph:  

$$$\Delta =\sum_{i=1}^N w_i (x_i - \bar{x})^2$$$  

## Code 

For code styling I'm currently using [Highlight.js](http://softwaremaniacs.org/soft/highlight/en/) .

This is inline code: `console.log("Hello, world !");` .  

This is a code paragraph :

    
    // example of code paragraph
    
    var i;

    for (i=0;i<100;i++) {
        console.log(i);
    }
    

## Media

Image test:

<img src="beach.jpg" />

Youtube test:

<iframe width="560" height="315" src="http://www.youtube.com/embed/JrQ0qMRZ_1Q" frameborder="0" allowfullscreen></iframe>  

## misc

Quote test:

> Suppose you were an idiot and
> suppose you were a member of congress;
> but I repeat myself .
>
> Mark Twain

Javascript animation test:

<div data-ng-controller='controller' style="font-family:monospaced;background-color:lightgray">{{dateTime}}</div>

------

This is the end of this test post.  

<script type="text/javascript">
    var controller = function ($scope, $timeout) {
        var updateDate = function () {
            $scope.dateTime = (new Date()).toString();
            $timeout(updateDate, 300);
        };
        updateDate();
    };
</script>]]></description>
            <link>http://blog.christofjans.com/test.post.html</link>
            <guid isPermaLink="true">http://blog.christofjans.com/test.post.html</guid>
            <dc:creator><![CDATA[Christof Jans]]></dc:creator>
            <pubDate>Sun, 14 Jul 2013 20:17:14 GMT</pubDate>
        </item>
    </channel>
</rss>